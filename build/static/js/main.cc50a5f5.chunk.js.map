{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputtext","setTodos","todos","inputtext","setstatus","value","onChange","e","target","type","className","onClick","preventDefault","length","text","completed","id","Math","random","alert","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setfilteredTodos","useEffect","getlocaltodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localtodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc50a5f5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({setInputtext, setTodos, todos, inputtext, setstatus}) => {\r\n    const inputTextHandler = (e) => {\r\n        setInputtext(e.target.value);\r\n    }\r\n    const submitToDo = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputtext.length !== 0){\r\n            setTodos([\r\n                ...todos, {text: inputtext, completed: false, id: Math.random()*1000}\r\n            ]);\r\n            setInputtext(\"\");\r\n        }else{\r\n            alert(\"Enter something, duh!\");\r\n        }\r\n    }\r\n    const statusHandler = (e) => {\r\n        setstatus(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <input value={inputtext} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n            <button onClick={submitToDo} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nconst Todo = ({todo, todos, setTodos}) => {\r\n    //Events\r\n    const deleteHandler = () =>{\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    }\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item =>{\r\n            if(item.id === todo.id){\r\n                return{\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item; \r\n        }))\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={!todo.completed ? \"todo-item\" : \"completed\"}>{todo.text}</li>    \r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>        \r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>        \r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\n//import comps..\r\nimport Todo from \"./Todo\"\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n    return(\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map(todo => (\r\n                    <Todo key={todo.id} todo={todo} todos={todos} setTodos={setTodos}/>\r\n                ))}\r\n                \r\n            </ul>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\n//import components\nimport Form from \"./components/Form\"\nimport TodoList from \"./components/TodoList\"\n\nfunction App() {\n  //state stuffs\n  const [inputtext, setInputtext] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setstatus] = useState(\"all\");\n  const [filteredTodos, setfilteredTodos] = useState([]);\n  \n  //run once when app starts\n  useEffect(() => {\n    getlocaltodos();\n  }, [])\n\n  //use effects\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status])\n  \n  //functions\n  const filterHandler = () =>{\n    switch(status){\n      case 'completed':\n        setfilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setfilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setfilteredTodos(todos);\n        break;\n    }\n  }\n\n  //Slocal storage\n  const  saveLocalTodos = () =>{\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }\n\n  const getlocaltodos = () =>{\n    if (localStorage.getItem(\"todos\") === null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }\n    else{\n      let localtodos = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(localtodos);\n    }\n  } \n\n  return (\n    <>\n      <header>\n      <h1>To-Do List</h1>\n      </header>\n      <Form setInputtext={setInputtext} inputtext={inputtext} todos={todos} setTodos={setTodos} setstatus={setstatus}/>\n      <TodoList todos={todos} setTodos={setTodos} filteredTodos= {filteredTodos}/>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}